name: Build, Test, SonarQube and Deploy

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  workflow_dispatch:


jobs:
  test-and-analyze:
    name: Test & SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Run Tests with Coverage
      run: npm test -- --coverage

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }} -Dsonar.projectName=${{ vars.SONAR_PROJECT_NAME }} -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }} -Dsonar.sources=. -Dsonar.tests=src -Dsonar.test.inclusions=**/*.test.js,**/*.test.tsx -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-push:
    needs:
    - test-and-analyze
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.name == 'workflow_dispatch' }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin \
        $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

    - name: Build Docker Image
      run: |
        docker build -t ${{ vars.ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }} .

    - name: Tag Docker Image
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        docker tag ${{ vars.ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }} $ACCOUNT_ID.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }}

    - name: Push Docker Image to Amazon ECR
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        docker push $ACCOUNT_ID.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:${{ vars.IMAGE_TAG }}

  deploy-ecs:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: needs.build-and-push.result == 'success'
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Force new deployment in ECS
      run: |
        aws ecs update-service \
          --cluster ${{ vars.ECS_CLUSTER_NAME }} \
          --service ${{ vars.ECS_SERVICE_NAME }} \
          --force-new-deployment
